(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{371:function(e,a,t){"use strict";t.r(a);var r=t(25),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"nsudo-shared-library"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nsudo-shared-library"}},[e._v("#")]),e._v(" NSudo Shared Library")]),e._v(" "),t("h2",{attrs:{id:"nsudocreateprocess-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nsudocreateprocess-function"}},[e._v("#")]),e._v(" NSudoCreateProcess function")]),e._v(" "),t("p",[e._v("Creates a new process and its primary thread.")]),e._v(" "),t("h3",{attrs:{id:"c-c-prototype"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-c-prototype"}},[e._v("#")]),e._v(" C/C++ prototype")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("EXTERN_C HRESULT WINAPI NSudoCreateProcess(\n    _In_ NSUDO_USER_MODE_TYPE UserModeType,\n    _In_ NSUDO_PRIVILEGES_MODE_TYPE PrivilegesModeType,\n    _In_ NSUDO_MANDATORY_LABEL_TYPE MandatoryLabelType,\n    _In_ NSUDO_PROCESS_PRIORITY_CLASS_TYPE ProcessPriorityClassType,\n    _In_ NSUDO_SHOW_WINDOW_MODE_TYPE ShowWindowModeType,\n    _In_ DWORD WaitInterval,\n    _In_ BOOL CreateNewConsole,\n    _In_ LPCWSTR CommandLine,\n    _In_opt_ LPCWSTR CurrentDirectory);\n")])])]),t("h3",{attrs:{id:"usermodetype-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usermodetype-parameter"}},[e._v("#")]),e._v(" UserModeType parameter")]),e._v(" "),t("p",[e._v("A value from the NSUDO_USER_MODE_TYPE enumerated type that identifies the user\nmode.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("typedef enum class _NSUDO_USER_MODE_TYPE\n{\n    DEFAULT,\n    TRUSTED_INSTALLER,\n    SYSTEM,\n    CURRENT_USER,\n    CURRENT_PROCESS,\n    CURRENT_PROCESS_DROP_RIGHT\n} NSUDO_USER_MODE_TYPE, *PNSUDO_USER_MODE_TYPE;\n")])])]),t("h3",{attrs:{id:"privilegesmodetype-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#privilegesmodetype-parameter"}},[e._v("#")]),e._v(" PrivilegesModeType parameter")]),e._v(" "),t("p",[e._v("A value from the NSUDO_PRIVILEGES_MODE_TYPE enumerated type that identifies the\nprivileges mode.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("typedef enum class _NSUDO_PRIVILEGES_MODE_TYPE\n{\n    DEFAULT,\n    ENABLE_ALL_PRIVILEGES,\n    DISABLE_ALL_PRIVILEGES\n} NSUDO_PRIVILEGES_MODE_TYPE, *PNSUDO_PRIVILEGES_MODE_TYPE;\n")])])]),t("h3",{attrs:{id:"mandatorylabeltype-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mandatorylabeltype-parameter"}},[e._v("#")]),e._v(" MandatoryLabelType parameter")]),e._v(" "),t("p",[e._v("A value from the NSUDO_MANDATORY_LABEL_TYPE enumerated type that identifies the\nmandatory label.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("typedef enum class _NSUDO_MANDATORY_LABEL_TYPE\n{\n    UNTRUSTED,\n    LOW,\n    MEDIUM,\n    MEDIUM_PLUS,\n    HIGH,\n    SYSTEM,\n    PROTECTED_PROCESS,\n} NSUDO_MANDATORY_LABEL_TYPE, *PNSUDO_MANDATORY_LABEL_TYPE;\n")])])]),t("h3",{attrs:{id:"processpriorityclasstype-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#processpriorityclasstype-parameter"}},[e._v("#")]),e._v(" ProcessPriorityClassType parameter")]),e._v(" "),t("p",[e._v("A value from the NSUDO_PROCESS_PRIORITY_CLASS_TYPE enumerated type that\nidentifies the process priority class.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("typedef enum class _NSUDO_PROCESS_PRIORITY_CLASS_TYPE\n{\n    IDLE,\n    BELOW_NORMAL,\n    NORMAL,\n    ABOVE_NORMAL,\n    HIGH,\n    REALTIME,\n} NSUDO_PROCESS_PRIORITY_CLASS_TYPE, *PNSUDO_PROCESS_PRIORITY_CLASS_TYPE;\n")])])]),t("h3",{attrs:{id:"showwindowmodetype-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#showwindowmodetype-parameter"}},[e._v("#")]),e._v(" ShowWindowModeType parameter")]),e._v(" "),t("p",[e._v("A value from the NSUDO_SHOW_WINDOW_MODE_TYPE enumerated type that identifies\nthe ShowWindow mode.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("typedef enum class _NSUDO_SHOW_WINDOW_MODE_TYPE\n{\n    DEFAULT,\n    SHOW,\n    HIDE,\n    MAXIMIZE,\n    MINIMIZE,\n} NSUDO_SHOW_WINDOW_MODE_TYPE, *PNSUDO_SHOW_WINDOW_MODE_TYPE;\n")])])]),t("h3",{attrs:{id:"waitinterval-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#waitinterval-parameter"}},[e._v("#")]),e._v(" WaitInterval parameter")]),e._v(" "),t("p",[e._v("The time-out interval for waiting the process, in milliseconds.")]),e._v(" "),t("h3",{attrs:{id:"createnewconsole-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#createnewconsole-parameter"}},[e._v("#")]),e._v(" CreateNewConsole parameter")]),e._v(" "),t("p",[e._v("If this parameter is TRUE, the new process has a new console, instead of\ninheriting its parent's console (the default).")]),e._v(" "),t("h3",{attrs:{id:"commandline-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commandline-parameter"}},[e._v("#")]),e._v(" CommandLine parameter")]),e._v(" "),t("p",[e._v("The command line to be executed. The maximum length of this string is 32K\ncharacters, the module name portion of CommandLine is limited to MAX_PATH\ncharacters.")]),e._v(" "),t("h3",{attrs:{id:"currentdirectory-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#currentdirectory-parameter"}},[e._v("#")]),e._v(" CurrentDirectory parameter")]),e._v(" "),t("p",[e._v("The full path to the current directory for the process. The string can also\nspecify a UNC path. If this parameter is nullptr, the new process will the same\ncurrent drive and directory as the calling process. (This feature is provided\nprimarily for shells that need to start an application and specify its initial\ndrive and working directory.)")]),e._v(" "),t("h3",{attrs:{id:"return-value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#return-value"}},[e._v("#")]),e._v(" Return value")]),e._v(" "),t("p",[e._v("HRESULT. If the function succeeds, the return value is S_OK.")]),e._v(" "),t("h2",{attrs:{id:"c-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-api"}},[e._v("#")]),e._v(" C# API")]),e._v(" "),t("p",[e._v("Load the M2.NSudo assembly to your project, you will know the usage.")]),e._v(" "),t("h3",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('using System;\n\nnamespace M2.NSudo.Demo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            NSudoInstance instance = new NSudoInstance();\n\n            instance.CreateProcess(\n                NSUDO_USER_MODE_TYPE.TRUSTED_INSTALLER,\n                NSUDO_PRIVILEGES_MODE_TYPE.ENABLE_ALL_PRIVILEGES,\n                NSUDO_MANDATORY_LABEL_TYPE.SYSTEM,\n                NSUDO_PROCESS_PRIORITY_CLASS_TYPE.NORMAL,\n                NSUDO_SHOW_WINDOW_MODE_TYPE.DEFAULT,\n                0,\n                true,\n                "cmd",\n                null);\n\n            Console.ReadKey();\n        }\n    }\n}\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);