(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{368:function(e,o,t){"use strict";t.r(o);var n=t(25),d=Object(n.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"nsudo-devil-mode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nsudo-devil-mode"}},[e._v("#")]),e._v(" NSudo Devil Mode")]),e._v(" "),t("p",[e._v("NSudo Devil Mode is a elegant solution for developers who want to bypass the\nfile and registry access checks. It hooks some file and registry Windows NT\nkernel system calls via Microsoft Detours, so developers only need to load\nNSudoDM.dll into their apps before enjoy it.")]),e._v(" "),t("p",[e._v("NSudo Devil Mode only needs Administrator privilege. So developers need to run\ntheir apps as Administrator if they want to use it.")]),e._v(" "),t("p",[e._v("As the creator of NSudo project, I think NSudo Devil Mode may replace tools\nsimilar as NSudo in the most cases. NSudo 8.0 will support run apps as NSudo\nDevil Mode, and Dism++ God Mode will be refactored with NSudo Devil Mode. So\nNSudo will be more professional in the future because I don't want to make\nNSudo is replaced by NSudo Devil Mode, lol.")]),e._v(" "),t("h2",{attrs:{id:"why-i-create-the-nsudo-devil-mode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why-i-create-the-nsudo-devil-mode"}},[e._v("#")]),e._v(" Why I create the NSudo Devil Mode")]),e._v(" "),t("p",[e._v("NSudo Shared Library is hard for developers to integrate it because it expose a\nlot of details about Windows security model and looks like a low level library.\nI don't think only providing NSudo Shared Library is good for developers who\nwant to bypass the file and registry access checks. So I have created the NSudo\nDevil Mode.")]),e._v(" "),t("h2",{attrs:{id:"origin-of-nsudo-devil-mode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#origin-of-nsudo-devil-mode"}},[e._v("#")]),e._v(" Origin of NSudo Devil Mode")]),e._v(" "),t("p",[e._v('NSudo Devil Mode is based on the Dism++ God Mode or call it "Dism++ 春哥附体"\nvia Chinese. I have refactored the implementations of Dism++ God Mode, add some\nnew features and make its source code available in NSudo\'s GitHub repository.')]),e._v(" "),t("h2",{attrs:{id:"the-list-of-hooked-windows-nt-kernel-system-calls"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-list-of-hooked-windows-nt-kernel-system-calls"}},[e._v("#")]),e._v(" The list of hooked Windows NT kernel system calls")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Origin")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("NtCreateKey")]),e._v(" "),t("td",[e._v("Dism++ God Mode.")])]),e._v(" "),t("tr",[t("td",[e._v("NtCreateKeyTransacted")]),e._v(" "),t("td",[e._v("NSudo Devil Mode.")])]),e._v(" "),t("tr",[t("td",[e._v("NtOpenKey")]),e._v(" "),t("td",[e._v("Dism++ God Mode. Extended in NSudo Devil Mode.")])]),e._v(" "),t("tr",[t("td",[e._v("NtOpenKeyTransacted")]),e._v(" "),t("td",[e._v("NSudo Devil Mode.")])]),e._v(" "),t("tr",[t("td",[e._v("NtOpenKeyEx")]),e._v(" "),t("td",[e._v("Dism++ God Mode.")])]),e._v(" "),t("tr",[t("td",[e._v("NtOpenKeyTransactedEx")]),e._v(" "),t("td",[e._v("NSudo Devil Mode.")])]),e._v(" "),t("tr",[t("td",[e._v("NtCreateFile")]),e._v(" "),t("td",[e._v("Dism++ God Mode.")])]),e._v(" "),t("tr",[t("td",[e._v("NtOpenFile")]),e._v(" "),t("td",[e._v("Dism++ God Mode.")])])])]),e._v(" "),t("h2",{attrs:{id:"how-to-use-nsudo-devil-mode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-to-use-nsudo-devil-mode"}},[e._v("#")]),e._v(" How to use NSudo Devil Mode")]),e._v(" "),t("p",[e._v("You can enable it via LoadLibrary and disable it via FreeLibrary. Here is a\ndemo code.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\n\nnamespace Demo\n{\n    class Program\n    {\n        [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]\n        static extern IntPtr LoadLibrary(string lpLibFileName);\n\n        [DllImport("kernel32.dll", SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        static extern bool FreeLibrary(IntPtr hLibModule);\n\n        static void Main(string[] args)\n        {\n            IntPtr NSudoDevilModeModuleHandle = LoadLibrary(\n                @"E:\\GitHub\\M2Team\\NSudo\\Output\\Release\\x64\\NSudoDevilMode.dll");\n\n            {\n                DirectoryInfo Folder = new DirectoryInfo(\n                @"C:\\System Volume Information");\n\n                foreach (FileInfo File in Folder.GetFiles())\n                {\n                    Console.WriteLine(File.FullName);\n                }\n            }\n\n            FreeLibrary(NSudoDevilModeModuleHandle);\n\n            {\n                DirectoryInfo Folder = new DirectoryInfo(\n                @"C:\\System Volume Information");\n\n                foreach (FileInfo File in Folder.GetFiles())\n                {\n                    Console.WriteLine(File.FullName);\n                }\n            }\n\n            Console.ReadKey();\n        }\n    }\n}\n')])])])])}),[],!1,null,null,null);o.default=d.exports}}]);